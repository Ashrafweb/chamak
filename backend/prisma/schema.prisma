// Define the datasource (your database)
datasource db {
  provider = "postgresql" // or your preferred relational DB like MySQL
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String      @id @default(uuid()) // Unique user identifier as UUID
  username  String      @unique
  email     String      @unique
  password  String // Store hashed password
  role      Role        @default(USER) // Role-based access (user/admin)
  bookings  Booking[] // One-to-many relationship with bookings
  receipts  Receipt[] // One-to-many relationship with receipts
  ownership Ownership[] // One-to-many relationship with ownership records

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instrument {
  id                String         @id @default(uuid()) // Unique instrument ID as UUID
  name              String // Name of the instrument
  type              InstrumentType // Type (bond, commodity, etc.)
  currentPrice      Float // Current price of the instrument
  estimatedReturn   Float // Estimated return in percentage
  maturityTime      Int // Maturity time in days
  availableUnits    Float // Available units of the instrument
  totalUnits        Float // Total units available
  fractionalSupport Boolean        @default(true) // If fractional purchase is allowed
  imageUrl          String         @default("https://asset.cloudinary.com/dzsacbrj8/f76c30cacc2e2588a4cc3a66a6a62848")
  bookings          Booking[] // One-to-many relationship with bookings
  ownership         Ownership[] // One-to-many relationship with ownership records

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id           String        @id @default(uuid()) // Unique booking ID as UUID
  userId       String // Reference to the user who booked the instrument
  instrumentId String // Reference to the instrument being booked
  bookedUnits  Float // Number of units booked
  status       BookingStatus @default(PENDING) // Booking status (Pending, Purchased, Expired, etc.)
  bookingTime  DateTime      @default(now()) // Time when the booking was made
  expiresAt    DateTime // Time when the booking expires (6 hours from booking)

  user       User       @relation(fields: [userId], references: [id])
  instrument Instrument @relation(fields: [instrumentId], references: [id])
  receipts   Receipt[] // One-to-many relation to Receipt

  @@index([instrumentId, userId]) // Index for faster queries
}

model Receipt {
  id         String        @id @default(uuid()) // Unique receipt ID as UUID
  bookingId  String // Reference to the booking that the receipt is attached to
  userId     String // Reference to the user who owns the receipt
  receiptUrl String // URL or path to the uploaded receipt image/file
  status     ReceiptStatus @default(PENDING) // Status of receipt verification
  verifiedAt DateTime? // Timestamp of when the receipt was verified (nullable)

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ownership {
  id            String   @id @default(uuid()) // Unique ownership record ID as UUID
  userId        String // Reference to the user who owns the instrument
  instrumentId  String // Reference to the instrument owned
  ownedUnits    Float // Number of units owned by the user
  ownershipTime DateTime @default(now()) // When the instrument was marked as owned

  user       User       @relation(fields: [userId], references: [id])
  instrument Instrument @relation(fields: [instrumentId], references: [id])

  @@unique([userId, instrumentId]) // Unique constraint to ensure a user can't own the same instrument twice
}

enum Role {
  USER
  ADMIN
}

enum InstrumentType {
  BOND
  COMMODITY
  FUND
  STOCK
  OTHER
}

enum BookingStatus {
  PENDING
  PURCHASED
  EXPIRED
  CANCELLED
  REJECTED
}

enum ReceiptStatus {
  PENDING
  VERIFIED
  REJECTED
}
